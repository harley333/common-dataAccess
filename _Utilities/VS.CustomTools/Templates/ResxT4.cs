// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace VS.CustomTools.Templates
{
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Xml;
    using EF.Utility.CS;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ResxT4 : ResxT4Base
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 12 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"

string inputFile = this.InputFile;
string nameSpace = this.Namespace;
var textTransform = DynamicTextTransformation.Create(this);

var className = Path.GetFileNameWithoutExtension(inputFile);
var normalizedClassName = className.Replace(".", "_");
var entries = ResxReader.GetEntriesFromFile(inputFile);
// alphabetical
entries.Sort(new Comparison<ResxReader.ResourceEntry>((e1, e2) => (e1.Name).CompareTo(e2.Name)));

var isEntityResourceFile = this.InputFile.Contains(".Resources.");


            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.Threading;\r\nusing System.Runtime.Serialization;\r\n\r\nna" +
                    "mespace ");
            
            #line 30 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(nameSpace));
            
            #line default
            #line hidden
            this.Write(" {\r\n\r\n");
            
            #line 32 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"

	if (isEntityResourceFile) {

            
            #line default
            #line hidden
            this.Write("#pragma warning disable 1591\r\n");
            
            #line 36 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"

	} // if isEntityResourceFile

            
            #line default
            #line hidden
            this.Write("    /// <summary>\r\n\t/// This class was generated from the \"");
            
            #line 40 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Path.GetFileName(this.InputFile)));
            
            #line default
            #line hidden
            this.Write("\" file using the\r\n\t/// VS.CustomTools Utility (ResxT4.tt).\r\n\t/// </summary>\r\n\t[gl" +
                    "obal::System.CodeDom.Compiler.GeneratedCodeAttribute(\"VS.CustomTools.ResxT4\", \"1" +
                    ".0.0.0\")]\r\n\tpublic class ");
            
            #line 44 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(normalizedClassName));
            
            #line default
            #line hidden
            this.Write(@" {

		private static global::System.Resources.ResourceManager resourceMan;

		[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		private static global::System.Resources.ResourceManager ResourceManager {
			get {
				if (object.ReferenceEquals(resourceMan, null)) {
					global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(""");
            
            #line 52 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.DefaultNamespace));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 52 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("\", typeof(");
            
            #line 52 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(normalizedClassName));
            
            #line default
            #line hidden
            this.Write(@").Assembly);
					resourceMan = temp;
				}
				return resourceMan;
			}
		}

		[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
		private static string GetResourceString(string key, params string[] tokens) {
			var culture = Thread.CurrentThread.CurrentCulture;
			var str = ResourceManager.GetString(key, culture);

			for (int i = 0; i < tokens.Length; i += 2) {
				str = str.Replace(tokens[i], tokens[i + 1]);
			}

			return str;
		}

");
            
            #line 71 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"

foreach (var entry in entries) {
	var tokens = Regex.Matches(entry.Value, @"{(([A-Za-z]{1}\w*?)|([A-Za-z_]{1}\w+?))?}").Cast<Match>().Select(m => m.Value);
	var hasTokens = tokens.Any();
	var isException = entry.Name.EndsWith("Exception");
	var hasComment = !String.IsNullOrWhiteSpace(entry.Comment);
    string inParams = "";
    string outParams = "";

    if (hasTokens) {
        inParams = tokens.Aggregate("", (list, value) => list += ", string " + value).Replace("{", "").Replace("}", "");
        outParams = tokens.Aggregate("", (list, value) => list += ", \"" + value + "\", " + value.Replace("{", "").Replace("}", ""));
    }
	if (hasComment) {

            
            #line default
            #line hidden
            this.Write("\t\t///\t<summary>\r\n\t\t///\t");
            
            #line 87 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Comment));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t///\t</summary>\r\n");
            
            #line 89 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"

	} // if hasComment
	if (isException) {

            
            #line default
            #line hidden
            this.Write("\t\t[Serializable]\r\n\t\tpublic class ");
            
            #line 94 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));
            
            #line default
            #line hidden
            this.Write(" : global::Common.DataAccess.LocalizedException {\r\n\r\n#pragma warning disable 1573" +
                    "\r\n\t\t\t/// <summary>\r\n\t\t\t/// Initializes a new instance of the <see cref=\"");
            
            #line 98 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));
            
            #line default
            #line hidden
            this.Write("\"/> class, setting\r\n\t\t\t/// the <see cref=\"System.Exception.Message\"/> property of" +
                    " the new instance to a system-supplied message\r\n\t\t\t/// that describes the error," +
                    " such as \"");
            
            #line 100 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Value.Replace(Environment.NewLine, Environment.NewLine + "\t\t\t/// ")));
            
            #line default
            #line hidden
            this.Write("\" This message takes into\r\n\t\t\t/// account the current system culture.\r\n\t\t\t/// </s" +
                    "ummary>\r\n\t\t\tpublic ");
            
            #line 103 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 103 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(!String.IsNullOrWhiteSpace(inParams) ? inParams.Substring(2) : ""));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t\t: base(GetResourceString(\"");
            
            #line 104 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));
            
            #line default
            #line hidden
            this.Write("\"");
            
            #line 104 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(outParams));
            
            #line default
            #line hidden
            this.Write(")) {\r\n\t\t\t}\r\n\r\n\t\t\t/// <summary>\r\n\t\t\t/// Initializes a new instance of the <see cre" +
                    "f=\"");
            
            #line 108 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));
            
            #line default
            #line hidden
            this.Write(@"""/> class with a
			/// reference to the inner exception that is the cause of this exception.
			/// </summary>
			/// <param name=""innerException"">The exception that is the cause of the current exception, or a <see langword=""null""/> if no inner exception is specified.</param>
			public ");
            
            #line 112 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));
            
            #line default
            #line hidden
            this.Write("(Exception innerException");
            
            #line 112 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(inParams));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t\t: base(GetResourceString(\"");
            
            #line 113 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));
            
            #line default
            #line hidden
            this.Write("\"");
            
            #line 113 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(outParams));
            
            #line default
            #line hidden
            this.Write("), innerException) {\r\n\t\t\t}\r\n\r\n\t\t\t/// <summary>\r\n\t\t\t/// Initializes a new instance" +
                    " of the ");
            
            #line 117 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));
            
            #line default
            #line hidden
            this.Write(@" class with serialized data.
			/// </summary>
			/// <param name=""info"">The <see cref=""System.Runtime.Serialization.SerializationInfo""/> that holds the serialized object data about the exception being thrown.</param>
			/// <param name=""context"">The <see cref=""System.Runtime.Serialization.StreamingContext""/> that contains contextual information about the source or destination.</param>
			public ");
            
            #line 121 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));
            
            #line default
            #line hidden
            this.Write("(SerializationInfo info, StreamingContext context)\r\n\t\t\t\t: base(info, context) {\r\n" +
                    "\t\t\t}\r\n#pragma warning restore 1573\r\n\r\n\t\t}\r\n");
            
            #line 127 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"

	} else if (hasTokens) {

            
            #line default
            #line hidden
            this.Write("#pragma warning disable 1573\r\n\t\tpublic static string ");
            
            #line 131 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 131 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(inParams.Substring(2)));
            
            #line default
            #line hidden
            this.Write(") {\r\n\t\t\treturn GetResourceString(\"");
            
            #line 132 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));
            
            #line default
            #line hidden
            this.Write("\"");
            
            #line 132 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(outParams));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t}\r\n#pragma warning restore 1573\r\n");
            
            #line 135 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"

	} else {

            
            #line default
            #line hidden
            this.Write("\t\tpublic static string ");
            
            #line 138 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));
            
            #line default
            #line hidden
            this.Write(" {\r\n\t\t\tget {\r\n\t\t\t\treturn GetResourceString(\"");
            
            #line 140 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(entry.Name));
            
            #line default
            #line hidden
            this.Write("\");\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 143 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"

	} // if hasTokens

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 147 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"

} // foreach entry

            
            #line default
            #line hidden
            this.Write("\t}\r\n");
            
            #line 151 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"

	if (isEntityResourceFile) {

            
            #line default
            #line hidden
            this.Write("#pragma warning restore 1591\r\n");
            
            #line 155 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"

	} // if isEntityResourceFile

            
            #line default
            #line hidden
            this.Write("\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 160 "C:\github-repos\common-dataAccess\_Utilities\VS.CustomTools\Templates\ResxT4.tt"

	private string InputFile;
	private string Namespace;
	private string DefaultNamespace;

	public virtual string TransformText(string inputFile, string nameSpace, string defaultNamespace) {
		this.InputFile = inputFile;
		this.Namespace = nameSpace;
		this.DefaultNamespace = defaultNamespace;

		return this.TransformText();
	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ResxT4Base
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
